xraylib
=======


Installation Instructions
=========================

xraylib follows the standard GNU installation procedure. To compile
xraylib you will need at least an ANSI C-compiler. Depending on the
requested bindings, other compilers and/or software packages will be
required in addition to the C compiler.

After unpacking the distribution, if the "configure" file is missing, this file
is generated using the command:

	autoconf -i

If errors are generated, make sure you have a relatively up-to-date version of autoconf.
Makefiles can be prepared using the configure command:

  ./configure

You can then build the library and the bindings which can be built as
determined by configure by typing,

  make

To verify that the build went ok, and to compile the example programs
in the example directory, use,

  make check

The installation can be performed with the command

  make install

The default installation directory prefix is /usr/local. Installing in
this directory will require root privileges on most systems.

The installation directory can be changed with the --prefix option to
configure. Consult the "Further information" section below for
instructions on installing the library in another location or changing
other default compilation options.



    -----------------------------------------------


Platforms known to compile and run xraylib
==========================================

  Linux (32-bit/64-bit)
  Solaris 10 (32-bit/64-bit)
  Mac OS X (32-bit/64-bit)
  Windows (native and Cygwin)
  FreeBSD (64-bit)

Not all bindings have been tested on each of these platforms. The
following table summarizes the current status.

         | Linux | Mac OS X | Solaris | Cygwin | FreeBSD |
----------------------------------------------------------
 Fortran |   x   |     x    |    x    |    x   |    x    |
  Perl   |   x   |     x    |    x    |    x   |    x    |
 Python  |   x   |     x    |         |    x   |         |
   IDL   |   x   |     x    |         |        |         |
  Java   |   x   |     x    |    ?    |    ?   |         |


    -----------------------------------------------




Platform Specific Compilation Notes
===================================

This section documents any known issues with installing xraylib on
specific platforms.
  * Mac OS X
  * Solaris
  * mingw32

Hints for Mac OS X
==================

Standard Mac OS X installations do not come with a C compiler. You can
install this essential compiler by installing the XCode package which
can be found on the Mac OS X cd or can be downloaded from the Apple
Developer Connection website.  A free Fortran compiler can be
downloaded from macports.org.

When compiling the IDL bindings on Snow Leopard, make sure that you
are using IDL 7.1. Older IDL versions do not have the necessary 64-bit
libraries


Hints for Solaris
=================

The Sun compiler tools are stored in non-standard directories -- make
sure that all the compiler and linker tools (cc, ar, ranlib, ld) are
on the PATH.  A typical PATH should include the directories
/opt/SUNWspro/bin:/usr/ccs/bin:/usr/ucb in that order.

For example,

  $ PATH=/opt/SUNWspro/bin:/usr/ccs/bin:/usr/ucb:$PATH
  $ ./configure CC=cc 

Use gmake instead of make. To do this, invoke:

  $ ./configure MAKE=gmake

gmake is not installed by default on Solaris 10, it can be downloaded
from blastwave.org

We have noticed that the compilation of the xrayglob_inline.c file
(using the Sun Studio C compiler) produces many warnings. These can be
ignored safely.

Also, the fortran compiler of the Sun Studio package requires the -M
command line option or the MODDIR environment variable to search for
.mod files. Since not all fortran compilers support this option, we
did not include this in the Makefile of the examples, causing the
fortran test to fail. This can however be circumvented by setting the
MODDIR variable pointing to the src directory.

The IDL bindings currently do not work on Solaris. The main reason
would be that none of the developers currently have access to an IDL
software package on this platform. If you do, and can test the
bindings, please contact the developers.


                    ------------------------------

Further information on the standard GNU installation procedure
==============================================================

The sections below describe the general features of the standard GNU
installation procedure.

Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code.

  2. If you need to create or remake the `configure' file, use  
     the `autoreconf -i' command. Note: The git repository does not
     contain a `configure' file.

  3. Type `./configure' to configure the package for your system.  
     If you're using `csh' on an old version of System V, you might 
     need to type `sh ./configure' instead to prevent `csh' from 
     trying to execute `configure' itself.

     Running `configure' takes a while.  While running, it prints some
     messages telling which features it is checking for.

  3. Type `make' to compile the package.

  4. Optionally, type `make check' to run any self-tests that come with
     the package and to compile and link the example programs in the 
     example directory.

  5. Type `make install' to install the programs and any data files and
     documentation.

  6. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.


